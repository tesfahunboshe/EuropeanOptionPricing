library(EuropeanOptionPricing)
knitr::opts_chunk$set(echo = TRUE)
# 2. install package and load to memory ========================================
# (adjust file names and/or paths, if necessary)
# # from binaries (no need to rebuild)
# install.packages("packages/optionPricer2_1.0_R_x86_64-pc-linux-gnu.tar.gz",
#                  type = "binaries",
#                  repos = NULL)
#
# # or from source (rebuilt automatically)
# install.packages("packages/optionPricer2_1.0.tar.gz",
#                  type = "source",
#                  repos = NULL)
# 3. call the function from the package ========================================
optionPricer2::getArithmeticAsianCallPrice(126, 100, 95, 0.2, 0.06, 0.5, 10000)
# 3. call the function from the package ========================================
EuropeanOptionPricing::getArithmeticAsianCallPrice(126, 100, 95, 0.2, 0.06, 0.5, 10000)
EuropeanOptionPricing::getArithmeticAsianCallPrice(126, 100, 95, 0.2, 0.06, 0.5, 10000)
# 2. install package and load to memory ========================================
# (adjust file names and/or paths, if necessary)
# # from binaries (no need to rebuild)
# install.packages("packages/optionPricer2_1.0_R_x86_64-pc-linux-gnu.tar.gz",
#                  type = "binaries",
#                  repos = NULL)
#
# # or from source (rebuilt automatically)
# install.packages("packages/optionPricer2_1.0.tar.gz",
#                  type = "source",
#                  repos = NULL)
# 3. call the function from the package ========================================
EuropeanOptionPricing::getArithmeticAsianCallPrice(105, 100, 95, 0.22, 0.05, 0.5, 10000)
EuropeanOptionPricing::generatePath(105, 100, 95, 0.22, 0.05, 0.5)
EuropeanOptionPricing::getArithmeticMean(105, 100, 95, 0.22, 0.05, 0.5)
EuropeanOptionPricing::getGeometricMean(105, 100, 95, 0.22, 0.05, 0.5)
EuropeanOptionPricing::printPath(105, 100, 95, 0.22, 0.05, 0.5)
EuropeanOptionPricing::getArithmeticAsianCallPrice(105, 100, 95, 0.22, 0.05, 0.5,1000)
EuropeanOptionPricing::getArithmeticAsianPutPrice(105, 100, 95, 0.22, 0.05, 0.5,1000)
EuropeanOptionPricing::getGeometricAsianCallPrice(105, 100, 95, 0.22, 0.05, 0.5,1000)
EuropeanOptionPricing::getGeometricAsianPutPrice(105, 100, 95, 0.22, 0.05, 0.5,1000)
EuropeanOptionPricing::operator()
load_all()
remove.packages("EuropeanOptionPricing")
detach("package:EuropeanOptionPricing", unload = TRUE) # if it still is in memory
remove.packages("EuropeanOptionPricing")
detach("EuropeanOptionPricing", unload = TRUE) # if it still is in memory
remove.packages("EuropeanCallUpandOut", lib="~/R/win-library/4.1")
.libPaths()
library(EuropeanOptionPricing)
EuropeanOptionPricing::getArithmeticAsianCallPrice(105, 100, 95, 0.22, 0.05, 0.5, 10000)
EuropeanOptionPricing::getArithmeticAsianPutPrice(105, 100, 95, 0.22, 0.05, 0.5, 10000)
library(EuropeanOptionPricing)
EuropeanOptionPricing::getArithmeticAsianPutPrice(105, 100, 95, 0.22, 0.05, 0.5, 10000)
EuropeanOptionPricing::getArithmeticAsianCallPrice(105, 100, 95, 0.22, 0.05, 0.5, 10000)
.libPaths()
hello <- function() {
print("Hello, world!")
}
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
source("~/Data Science/Sem3/Advanced Finance/Lab/Homework task_4/EuropeanOptionPricing/R/hello.R", echo=TRUE)
library(EuropeanOptionPricing)
knitr::opts_chunk$set(echo = TRUE)
# 2. install package and load to memory ========================================
# (adjust file names and/or paths, if necessary)
# # from binaries (no need to rebuild)
# install.packages("packages/optionPricer2_1.0_R_x86_64-pc-linux-gnu.tar.gz",
#                  type = "binaries",
#                  repos = NULL)
#
# # or from source (rebuilt automatically)
# install.packages("packages/optionPricer2_1.0.tar.gz",
#                  type = "source",
#                  repos = NULL)
# 3. call the function from the package ========================================
EuropeanOptionPricing::getArithmeticAsianCallPrice(105, 100, 95, 0.22, 0.05, 0.5, 10000)
# 2. install package and load to memory ========================================
# (adjust file names and/or paths, if necessary)
# # from binaries (no need to rebuild)
# install.packages("packages/optionPricer2_1.0_R_x86_64-pc-linux-gnu.tar.gz",
#                  type = "binaries",
#                  repos = NULL)
#
# # or from source (rebuilt automatically)
# install.packages("packages/optionPricer2_1.0.tar.gz",
#                  type = "source",
#                  repos = NULL)
# 3. call the function from the package ========================================
EuropeanOptionPricing::SimpleMonteCarloPrice(105, 100, 95, 0.22, 0.05, 0.5, 10000)
library(tools)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
knitr::opts_chunk$set(echo = TRUE)
# 2. install package and load to memory ========================================
# (adjust file names and/or paths, if necessary)
# # from binaries (no need to rebuild)
# install.packages("packages/optionPricer2_1.0_R_x86_64-pc-linux-gnu.tar.gz",
#                  type = "binaries",
#                  repos = NULL)
#
# # or from source (rebuilt automatically)
# install.packages("packages/optionPricer2_1.0.tar.gz",
#                  type = "source",
#                  repos = NULL)
# 3. call the function from the package ========================================
EuropeanOptionPricing::SimpleMonteCarloPrice(105, 100, 95, 0.22, 0.05, 0.5, 10000)
library(EuropeanOptionPricing)
knitr::opts_chunk$set(echo = TRUE)
# 2. install package and load to memory ========================================
# (adjust file names and/or paths, if necessary)
# # from binaries (no need to rebuild)
# install.packages("packages/optionPricer2_1.0_R_x86_64-pc-linux-gnu.tar.gz",
#                  type = "binaries",
#                  repos = NULL)
#
# # or from source (rebuilt automatically)
# install.packages("packages/optionPricer2_1.0.tar.gz",
#                  type = "source",
#                  repos = NULL)
# 3. call the function from the package ========================================
EuropeanOptionPricing::SimpleMonteCarloPrice(105, 100, 95, 0.22, 0.05, 0.5, 10000)
# 2. install package and load to memory ========================================
# (adjust file names and/or paths, if necessary)
# # from binaries (no need to rebuild)
# install.packages("packages/optionPricer2_1.0_R_x86_64-pc-linux-gnu.tar.gz",
#                  type = "binaries",
#                  repos = NULL)
#
# # or from source (rebuilt automatically)
# install.packages("packages/optionPricer2_1.0.tar.gz",
#                  type = "source",
#                  repos = NULL)
# 3. call the function from the package ========================================
EuropeanOptionPricing::getArithmeticAsianCallPrice(105, 100, 95, 0.22, 0.05, 0.5, 10000)
# 2. install package and load to memory ========================================
# (adjust file names and/or paths, if necessary)
# # from binaries (no need to rebuild)
# install.packages("packages/optionPricer2_1.0_R_x86_64-pc-linux-gnu.tar.gz",
#                  type = "binaries",
#                  repos = NULL)
#
# # or from source (rebuilt automatically)
# install.packages("packages/optionPricer2_1.0.tar.gz",
#                  type = "source",
#                  repos = NULL)
# 3. call the function from the package ========================================
EuropeanOptionPricing::getArithmeticAsianCallPrice(105, 100, 95, 0.22, 0.05, 0.5, 10000)
EuropeanOptionPricing::SimpleMonteCarloPrice(105, 100, 95, 0.22, 0.05, 0.5, 10000)
library(EuropeanOptionPricing)
knitr::opts_chunk$set(echo = TRUE)
# 2. install package and load to memory ========================================
# (adjust file names and/or paths, if necessary)
# # from binaries (no need to rebuild)
# install.packages("packages/optionPricer2_1.0_R_x86_64-pc-linux-gnu.tar.gz",
#                  type = "binaries",
#                  repos = NULL)
#
# # or from source (rebuilt automatically)
# install.packages("packages/optionPricer2_1.0.tar.gz",
#                  type = "source",
#                  repos = NULL)
# 3. call the function from the package ========================================
EuropeanOptionPricing::getArithmeticAsianCallPrice(105, 100, 95, 0.22, 0.05, 0.5, 10000)
# 2. install package and load to memory ========================================
# (adjust file names and/or paths, if necessary)
# # from binaries (no need to rebuild)
# install.packages("packages/optionPricer2_1.0_R_x86_64-pc-linux-gnu.tar.gz",
#                  type = "binaries",
#                  repos = NULL)
#
# # or from source (rebuilt automatically)
# install.packages("packages/optionPricer2_1.0.tar.gz",
#                  type = "source",
#                  repos = NULL)
# 3. call the function from the package ========================================
# EuropeanOptionPricing::getArithmeticAsianCallPrice(105, 100, 95, 0.22, 0.05, 0.5, 10000)
EuropeanOptionPricing::SimpleMonteCarloPrice(105, 100, 95, 0.22, 0.05, 0.5, 10000)
library(EuropeanOptionPricing)
knitr::opts_chunk$set(echo = TRUE)
# 2. install package and load to memory ========================================
# (adjust file names and/or paths, if necessary)
# # from binaries (no need to rebuild)
# install.packages("packages/optionPricer2_1.0_R_x86_64-pc-linux-gnu.tar.gz",
#                  type = "binaries",
#                  repos = NULL)
#
# # or from source (rebuilt automatically)
# install.packages("packages/optionPricer2_1.0.tar.gz",
#                  type = "source",
#                  repos = NULL)
# 3. call the function from the package ========================================
EuropeanOptionPricing::getArithmeticAsianCallPrice(105, 100, 95, 0.22, 0.05, 0.5, 10000)
# 2. install package and load to memory ========================================
# (adjust file names and/or paths, if necessary)
# # from binaries (no need to rebuild)
# install.packages("packages/optionPricer2_1.0_R_x86_64-pc-linux-gnu.tar.gz",
#                  type = "binaries",
#                  repos = NULL)
#
# # or from source (rebuilt automatically)
# install.packages("packages/optionPricer2_1.0.tar.gz",
#                  type = "source",
#                  repos = NULL)
# 3. call the function from the package ========================================
# EuropeanOptionPricing::getArithmeticAsianCallPrice(105, 100, 95, 0.22, 0.05, 0.5, 10000)
EuropeanOptionPricing::SimpleMonteCarloPrice(105, 100, 95, 0.22, 0.05, 0.5, 10000)
lsf.str("package:EuropeanOptionPricing")
lsf("package:EuropeanOptionPricing")
ls("package:EuropeanOptionPricing")
library(EuropeanOptionPricing)
ls("package:EuropeanOptionPricing")
knitr::opts_chunk$set(echo = TRUE)
# 2. install package and load to memory ========================================
# (adjust file names and/or paths, if necessary)
# # from binaries (no need to rebuild)
# install.packages("packages/optionPricer2_1.0_R_x86_64-pc-linux-gnu.tar.gz",
#                  type = "binaries",
#                  repos = NULL)
#
# # or from source (rebuilt automatically)
# install.packages("packages/optionPricer2_1.0.tar.gz",
#                  type = "source",
#                  repos = NULL)
# 3. call the function from the package ========================================
EuropeanOptionPricing::getSimpleMonteCarloPrice(105, 100, 95, 0.22, 0.05, 0.5, 10000)
# EuropeanOptionPricing::SimpleMonteCarloPrice(105, 100, 95, 0.22, 0.05, 0.5, 10000)
library(EuropeanOptionPricing)
